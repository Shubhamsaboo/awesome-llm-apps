# -*- coding: utf-8 -*-
"""AIAstronaut Agent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VbxLUNCOifo4dOCH5UCG4FqiOo6uzEUk
"""

pip install requests python-dotenv

import requests
import os
from dotenv import load_dotenv

import os
import requests
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Get API key from environment variable
API_KEY = os.getenv("GEMINI_API_KEY")

# Helper function to ask Gemini API
def ask_gemini(prompt: str, model="gemini-1.5-flash"):
    if not API_KEY:
        return "Error: API key is missing. Please set GEMINI_API_KEY in the .env file."

    # Correct Gemini API URL
    gemini_api_url = f"https://generativelanguage.googleapis.com/v1beta/models/{model}:generateContent?key={API_KEY}"

    headers = {
        "Content-Type": "application/json"
    }

    # Prepare the request payload as per Gemini documentation
    data = {
        "contents": [{
            "parts": [{"text": prompt}]
        }]
    }

    # Make the API request
    response = requests.post(gemini_api_url, json=data, headers=headers)

    # Check response status
    if response.status_code == 200:
        parsed_response = response.json()
        return parsed_response.get("contents", [{}])[0].get("parts", [{}])[0].get("text", "No response from AI.")
    else:
        return f"Error: {response.status_code}, Message: {response.text}"


ask_gemini("What is the capital of France?")

import os
import requests
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Get API key from environment variable
API_KEY = os.getenv("GEMINI_API_KEY")

def ask_gemini(prompt: str, model="gemini-1.5-flash"):
    if not API_KEY:
        return "Error: API key is missing. Please set GEMINI_API_KEY in the .env file."

    # Correct Gemini API URL with API key
    gemini_api_url = f"https://generativelanguage.googleapis.com/v1beta/models/{model}:generateContent?key={API_KEY}"

    headers = {
        "Content-Type": "application/json"
    }

    # Prepare the request payload as per Gemini documentation
    data = {
        "contents": [
            {"parts": [{"text": prompt}]}
        ]
    }

    # Debug: Print the request payload
    print("Request Payload:", data)

    # Make the API request
    response = requests.post(gemini_api_url, json=data, headers=headers)

    # Debug: Print the raw response
    print("Raw Response:", response.text)

    # Check response status
    if response.status_code == 200:
        parsed_response = response.json()

        # Extract AI response from "candidates"
        try:
            ai_response = parsed_response["candidates"][0]["content"]["parts"][0]["text"]
            return ai_response
        except (KeyError, IndexError):
            return "Error: AI response structure changed or missing."
    else:
        return f"Error: {response.status_code}, Message: {response.text}"

# Base AI Agent class
class AI_Agent:
    def __init__(self, name, role, tools, backstory):
        self.name = name
        self.role = role
        self.tools = tools
        self.backstory = backstory

    def respond(self, query: str):
        # Prepend backstory to query to make responses more contextually relevant
        prompt = f"{self.backstory}\nUser: {query}\n{self.name}:"
        return ask_gemini(prompt)

# Create agents with sample queries
if __name__ == "__main__":
    # Instantiate agents
    medical_agent = AI_Agent(
        "Medical Assistant",
        "Assist astronauts with medical issues",
        ["First Aid Guide", "Vitals Monitor"],
        "You are a trained medical assistant designed to help astronauts with medical emergencies in space."
    )

    queries = [
        "How do I treat a burn injury in space?",
        "What is causing the engine malfunction?",
        "Can you guide me to the nearest airlock?"
    ]

    # Output response for each query
    print("Medical Agent Response:")
    for query in queries:
        print(f"Query: {query}")
        print(f"Response: {medical_agent.respond(query)}\n")

# ipython-input-7-5901884b71cf

# Define the agent classes based on the AI_Agent class
class MedicalAgent(AI_Agent):
    def __init__(self):
        super().__init__(
            "Medical Assistant",
            "Assist astronauts with medical issues",
            ["First Aid Guide", "Vitals Monitor"],
            "You are a trained medical assistant designed to help astronauts with medical emergencies in space."
        )

class TechSupportAgent(AI_Agent):
    def __init__(self):
        super().__init__(
            "Tech Support",
            "Assist astronauts with technical issues",
            ["System Diagnostics", "Repair Manuals"],
            "You are a tech support specialist designed to help astronauts with technical problems in space."
        )

class NavigationAgent(AI_Agent):
    def __init__(self):
        super().__init__(
            "Navigation Assistant",
            "Assist astronauts with navigation",
            ["Star Charts", "Spacecraft Sensors"],
            "You are a navigation assistant designed to help astronauts with navigation in space."
        )

if __name__ == "__main__":
    # Instantiate agents
    medical_agent = MedicalAgent()
    tech_support_agent = TechSupportAgent()
    navigation_agent = NavigationAgent()

    # Example queries
    queries = [
        "How do I treat a burn injury in space?",
        "What is causing the engine malfunction?",
        "Can you guide me to the nearest airlock?"
    ]

    # Test responses from each agent
    print("Medical Agent Response:")
    for query in queries:
        print(f"Query: {query}")
        print(f"Response: {medical_agent.respond(query)}\n")

    print("Tech Support Agent Response:")
    for query in queries:
        print(f"Query: {query}")
        print(f"Response: {tech_support_agent.respond(query)}\n")

    print("Navigation Agent Response:")
    for query in queries:
        print(f"Query: {query}")
        print(f"Response: {navigation_agent.respond(query)}\n")

for query in queries:
    response = medical_agent.respond(query)
    print(f"ü©∫ Medical Agent Response to '{query}':\n‚û°Ô∏è {response}\n")