from agno.agent import Agent
from agno.models.google import Gemini
from agno.media import Image as AgnoImage
from agno.tools.duckduckgo import DuckDuckGoTools
import streamlit as st
from typing import List, Optional
from agno.agent import Agent
from agno.models.google import Gemini
from agno.media import Image as AgnoImage
from agno.tools.duckduckgo import DuckDuckGoTools
import streamlit as st
from typing import List, Optional
import logging
from pathlib import Path
import tempfile
import os

# Configure logging for errors only
logging.basicConfig(level=logging.ERROR)
logger = logging.getLogger(__name__)

def initialize_agents(api_key: str) -> tuple[Agent, Agent, Agent, Agent]:
    try:
        model = Gemini(id="gemini-2.0-flash-exp", api_key=api_key)
        
        therapist_agent = Agent(
            model=model,
            name="Agente Terapeuta",
            instructions=[
                "Eres un terapeuta emp√°tico que:",
                "1. Escucha con empat√≠a y valida los sentimientos",
                "2. Usa humor gentil para aligerar el ambiente",
                "3. Comparte experiencias de ruptura con las que se pueda identificar",
                "4. Ofrece palabras de consuelo y aliento",
                "5. Analiza tanto las entradas de texto como de imagen para el contexto emocional",
                "S√© solidario y comprensivo en tus respuestas"
            ],
            markdown=True
        )

        closure_agent = Agent(
            model=model,
            name="Agente de Cierre",
            instructions=[
                "Eres un especialista en cierre que:",
                "1. Crea mensajes emocionales para sentimientos no enviados",
                "2. Ayuda a expresar emociones crudas y honestas",
                "3. Formatea los mensajes claramente con encabezados",
                "4. Asegura que el tono sea sincero y aut√©ntico",
                "Conc√©ntrate en la liberaci√≥n emocional y el cierre"
            ],
            markdown=True
        )

        routine_planner_agent = Agent(
            model=model,
            name="Agente Planificador de Rutinas",
            instructions=[
                "Eres un planificador de rutinas de recuperaci√≥n que:",
                "1. Dise√±a desaf√≠os de recuperaci√≥n de 7 d√≠as",
                "2. Incluye actividades divertidas y tareas de autocuidado",
                "3. Sugiere estrategias de desintoxicaci√≥n de redes sociales",
                "4. Crea listas de reproducci√≥n empoderadoras",
                "Conc√©ntrate en pasos pr√°cticos de recuperaci√≥n"
            ],
            markdown=True
        )

        brutal_honesty_agent = Agent(
            model=model,
            name="Agente de Honestidad Brutal",
            tools=[DuckDuckGoTools()],
            instructions=[
                "Eres un especialista en retroalimentaci√≥n directa que:",
                "1. Da retroalimentaci√≥n cruda y objetiva sobre las rupturas",
                "2. Explica claramente los fracasos en las relaciones",
                "3. Usa un lenguaje directo y factual",
                "4. Proporciona razones para seguir adelante",
                "Conc√©ntrate en perspectivas honestas sin endulzar la realidad"
            ],
            markdown=True
        )
        
        return therapist_agent, closure_agent, routine_planner_agent, brutal_honesty_agent
    except Exception as e:
        st.error(f"Error al inicializar los agentes: {str(e)}")
        return None, None, None, None

# Set page config and UI elements
st.set_page_config(
    page_title="üíî Escuadr√≥n de Recuperaci√≥n de Rupturas",
    page_icon="üíî",
    layout="wide"
)



# Sidebar for API key input
with st.sidebar:
    st.header("üîë Configuraci√≥n de API")

    if "api_key_input" not in st.session_state:
        st.session_state.api_key_input = ""
        
    api_key = st.text_input(
        "Ingresa tu Clave API de Gemini",
        value=st.session_state.api_key_input,
        type="password",
        help="Obt√©n tu clave API de Google AI Studio",
        key="api_key_widget"  
    )

    if api_key != st.session_state.api_key_input:
        st.session_state.api_key_input = api_key
    
    if api_key:
        st.success("¬°Clave API proporcionada! ‚úÖ")
    else:
        st.warning("Por favor, ingresa tu clave API para continuar")
        st.markdown("""
        Para obtener tu clave API:
        1. Ve a [Google AI Studio](https://makersuite.google.com/app/apikey)
        2. Habilita la API de Lenguaje Generativo en tu [Google Cloud Console](https://console.developers.google.com/apis/api/generativelanguage.googleapis.com)
        """)

# Main content
st.title("üíî Escuadr√≥n de Recuperaci√≥n de Rupturas")
st.markdown("""
    ### ¬°Tu equipo de recuperaci√≥n de rupturas impulsado por IA est√° aqu√≠ para ayudarte!
    Comparte tus sentimientos y capturas de pantalla de chat, y te ayudaremos a superar este momento dif√≠cil.
""")

# Input section
col1, col2 = st.columns(2)

with col1:
    st.subheader("Comparte Tus Sentimientos")
    user_input = st.text_area(
        "¬øC√≥mo te sientes? ¬øQu√© pas√≥?",
        height=150,
        placeholder="Cu√©ntanos tu historia..."
    )
    
with col2:
    st.subheader("Sube Capturas de Pantalla del Chat")
    uploaded_files = st.file_uploader(
        "Sube capturas de pantalla de tus chats (opcional)",
        type=["jpg", "jpeg", "png"],
        accept_multiple_files=True,
        key="screenshots"
    )
    
    if uploaded_files:
        for file in uploaded_files:
            st.image(file, caption=file.name, use_container_width=True)

# Process button and API key check
if st.button("Obtener Plan de Recuperaci√≥n üíù", type="primary"):
    if not st.session_state.api_key_input:
        st.warning("¬°Por favor, ingresa primero tu clave API en la barra lateral!")
    else:
        therapist_agent, closure_agent, routine_planner_agent, brutal_honesty_agent = initialize_agents(st.session_state.api_key_input)
        
        if all([therapist_agent, closure_agent, routine_planner_agent, brutal_honesty_agent]):
            if user_input or uploaded_files:
                try:
                    st.header("Tu Plan de Recuperaci√≥n Personalizado")
                    
                    def process_images(files):
                        processed_images = []
                        for file in files:
                            try:
                                temp_dir = tempfile.gettempdir()
                                temp_path = os.path.join(temp_dir, f"temp_{file.name}")
                                
                                with open(temp_path, "wb") as f:
                                    f.write(file.getvalue())
                                
                                agno_image = AgnoImage(filepath=Path(temp_path))
                                processed_images.append(agno_image)
                                
                            except Exception as e:
                                logger.error(f"Error al procesar la imagen {file.name}: {str(e)}")
                                continue
                        return processed_images
                    
                    all_images = process_images(uploaded_files) if uploaded_files else []
                    
                    # Therapist Analysis
                    with st.spinner("ü§ó Obteniendo apoyo emp√°tico..."):
                        therapist_prompt = f"""
                        Analiza el estado emocional y proporciona apoyo emp√°tico basado en:
                        Mensaje del usuario: {user_input}
                        
                        Por favor, proporciona una respuesta compasiva con:
                        1. Validaci√≥n de los sentimientos
                        2. Palabras gentiles de consuelo
                        3. Experiencias con las que se pueda identificar
                        4. Palabras de aliento
                        """
                        
                        response = therapist_agent.run(
                            message=therapist_prompt,
                            images=all_images
                        )
                        
                        st.subheader("ü§ó Apoyo Emocional")
                        st.markdown(response.content)
                    
                    # Closure Messages
                    with st.spinner("‚úçÔ∏è Creando mensajes de cierre..."):
                        closure_prompt = f"""
                        Ayuda a crear un cierre emocional basado en:
                        Sentimientos del usuario: {user_input}
                        
                        Por favor, proporciona:
                        1. Plantilla para mensajes no enviados
                        2. Ejercicios de liberaci√≥n emocional
                        3. Rituales de cierre
                        4. Estrategias para seguir adelante
                        """
                        
                        response = closure_agent.run(
                            message=closure_prompt,
                            images=all_images
                        )
                        
                        st.subheader("‚úçÔ∏è Encontrando el Cierre")
                        st.markdown(response.content)
                    
                    # Recovery Plan
                    with st.spinner("üìÖ Creando tu plan de recuperaci√≥n..."):
                        routine_prompt = f"""
                        Dise√±a un plan de recuperaci√≥n de 7 d√≠as basado en:
                        Estado actual: {user_input}
                        
                        Incluye:
                        1. Actividades y desaf√≠os diarios
                        2. Rutinas de autocuidado
                        3. Pautas para redes sociales
                        4. Sugerencias de m√∫sica para levantar el √°nimo
                        """
                        
                        response = routine_planner_agent.run(
                            message=routine_prompt,
                            images=all_images
                        )
                        
                        st.subheader("üìÖ Tu Plan de Recuperaci√≥n")
                        st.markdown(response.content)
                    
                    # Honest Feedback
                    with st.spinner("üí™ Obteniendo una perspectiva honesta..."):
                        honesty_prompt = f"""
                        Proporciona retroalimentaci√≥n honesta y constructiva sobre:
                        Situaci√≥n: {user_input}
                        
                        Incluye:
                        1. An√°lisis objetivo
                        2. Oportunidades de crecimiento
                        3. Perspectiva futura
                        4. Pasos procesables
                        """
                        
                        response = brutal_honesty_agent.run(
                            message=honesty_prompt,
                            images=all_images
                        )
                        
                        st.subheader("üí™ Perspectiva Honesta")
                        st.markdown(response.content)
                            
                except Exception as e:
                    logger.error(f"Error durante el an√°lisis: {str(e)}")
                    st.error("Ocurri√≥ un error durante el an√°lisis. Por favor, revisa los registros para m√°s detalles.")
            else:
                st.warning("Por favor, comparte tus sentimientos o sube capturas de pantalla para obtener ayuda.")
        else:
            st.error("Fall√≥ la inicializaci√≥n de los agentes. Por favor, verifica tu clave API.")

# Footer
st.markdown("---")
st.markdown("""
    <div style='text-align: center'>
        <p>Hecho con ‚ù§Ô∏è por el Escuadr√≥n de Recuperaci√≥n de Rupturas</p>
        <p>Comparte tu viaje de recuperaci√≥n con #EscuadronRecuperacionRupturas</p>
    </div>
""", unsafe_allow_html=True)